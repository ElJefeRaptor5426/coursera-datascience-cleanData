x <- list(2, "a", "b", TRUE)
x[[1]]
x<-1:4
y<-2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]<-0
x
x[x<6]==0
read.csv('/Users/apburg/Downloads/hw1_data.csv')
df<-read.csv('/Users/apburg/Downloads/hw1_data.csv')
x<-df[Ozone>31]
x<-df["Ozone">31&&"Temp">90]
x
x<-df[df$Ozone>31]
subset(df, df$Ozone>31)
x<-subset(df, df$Ozone>31)
x<-subset(x,df$Temp>90)
mean(x)
colMeans(x)
x<-subset(df, df$Ozone>31)
x<-subset(x,df$Temp>90)
colMeans(x)
x
df
s<-subset(df,df$Ozone>31&&df$Temp>90)
s
s<-subset(df,df$Ozone>31&df$Temp>90)
s
colMeans(s)
colMeans(subset(df,df$Month==6))
max(subset(df,df$Month==5))
max(subset(df,df$Month==5)["Ozone"])
max(df[df$Month==5,c("Ozone")])
max(df[df$Month==6,c("Ozone")])
x<-4L
class(x)
x<-c(4,TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
df[2]
df
install.packages('swirl')
packageVersion('swirl')
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
z<-c(555)
c(z,555,z)
z*2 +100
sqrt(z-1)
my_sqrt<-sqrt(z-1)
print(my_sqrt)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 +1000
my_div
df<-read.csv('/Users/apburg/Downloads/getdata%2Fdata%2Fss06hid.csv')
val<-df[df$VAL>=1000000,df$VAL]
val<-df[df$VAL>=1000000,c("VAL")]
val
df
val<-df[df$VAL>=24,c("VAL")]
val
dat<-read.file('/Users/apburg/Downloads/getdata%2Fdata%2FDATA.gov_NGAP.xlsx')
dat<-read.table('/Users/apburg/Downloads/getdata%2Fdata%2FDATA.gov_NGAP.xlsx')
dat<-read.table('/Users/apburg/Downloads/getdata%2Fdata%2FDATA.gov_NGAP.xlsx',header = TRUE)
dat
require(xlsReadWrite)
xls.getshlib()
install.packages(xlsReadWrite)
install.packages(xls)
install.packages(readxl)
swirl
swirl()
library(swirl)
swirl()
quit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country == "US" | country == "IN")
filter(cran,size > 100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
cran3
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package(cran,pacakge)
by_package<-group_by(cran,pacakge)
by_package<-group_by(cran,"pacakge")
by_package<-group_by(cran,pacakge)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique >465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key="sex_class",value="count",sex,class,-grade)
res<-gather(students2,key="sex_class",value="count")
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into = c("sex","class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed,id)
?bind_rows
bind_rows(passed,failed)
sat
?gather
?separate
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,into(c("sex","class")))
separate(res,sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "data.csv")
data <- read.csv("data.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
agricultureLogical
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
?jpeg
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","inst.jpg")
img <- readJPEG("inst.jpg",native = TRUE)
img
quantile(img,probs=0.3)
quantile(img,probs=0.8)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","edu.csv")
gdp <- read.csv("gdp.csv")
edu <- read.csv("edu.csv")
edu
names(edu)
?merge
names(gdp)
gdp
merged <- merge(gdp,edu,by=c("X","CountryCode"))
edu
gdp$X
merged <- merge(gdp,edu,by=c("X","CountryCode"))
merged <- merge(gdp,edu,by.x="X",by.y="CountryCode")
merged
count(merged)
intersect(gdp$X,edu$CountryCode)
length(intersect(gdp$X,edu$CountryCode))
gdp<-arrange(gdp,rank)
gdp
gdp<-arrange(gdp,Ranking)
merged
gdp<-arrange(gdp,Gross.domestic.product.2012)
gdp
head(gdp,190)
gdp<-head(gdp,190)
length(intersect(gdp$X,edu$CountryCode))
library(datasets)
data(iris)
?iris
lapply(iris,mean)
mean(select(iris,Sepal.Length))
mean(select(iris,Sepal.Length), na.rm=TRUE)
select(iris, Sepal.Length)
mean(select(iris,Sepal.Length), na.rm=TRUE)
sepalLng <- select(iris, Sepal.Length)
mean(sepalLng)
mean(as.number(sepalLng))
mean(as.double(sepalLng))
lapply(sepalLng, mean)
apply(iris,2,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
?tapply
?sapply
sapply(mtcars,cyl,mean)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
lapply(mtcars,mean)
hp<-tapply(mtcars$hp,mtcars$cyl,mean)
hp
hp$4
hp['4']
abs(hp['4']-hp['8'])
debug(ls)
ls
iris
debug()
iris
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plantes)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips < -sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100,prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm()
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5)
rpois(5, lambda = c(10))
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
q()
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist, labels=c("Speed"))
?plot
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab = "Stopping Distance", main = "My Plot
")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
?as.factor
setwd("~/Documents/GitHub/coursera-datascience-cleandata")
source("run_analysis.R")
test_data$Activity <- as.factor(test_data$Activity)
test_data$Activity <- as.ordered(test_data$Activity)
str(test_data)
str(test_data$Activity)
class(test_data$Activity)
class(test_labels)
source("run_analysis.R")
source("run_analysis.R")
head(dataset)
source("run_analysis.R")
?labels
?factor
source("run_analysis.R")
source("run_analysis.R")
names(dataset)
?contains
new <- select(dataset, contains("mean|std"))
names(new)
new
new <- select(dataset, contains("mean"))
names(new)
new <- select(dataset, contains("[mean, std]"))
new <- select(dataset, contains("mean")|contains("std"))
new <- select(dataset, contains("mean"))
meanSet <- select(dataset, contains("mean"))
stdSet <- select(dataset, contains("std"))
names(stdSet)
new <- bind_cols(meanSet,stdSet)
new
source("run_analysis.R")
source("run_analysis.R")
?`dplyr-package`
help(package=dplyr)
source("run_analysis.R")
act_dataset
source("run_analysis.R")
actSet
actSet
source("run_analysis.R")
head(act_dataset)
?arrange
source("run_analysis.R")
head(act_dataset)
write.table(act_dataset,row.names = FALSE)
write.table(act_dataset,row.names = FALSE,file = "dataset_apb.txt")
